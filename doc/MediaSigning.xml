<?xml version="1.0"?>
<?xml-stylesheet href="docbook.xsl" type="text/xsl" ?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0">
  <info>
    <title>Media Signing Specification</title>
    <titleabbrev>Media Signing</titleabbrev>
    <releaseinfo>22.12</releaseinfo>
    <author>
      <orgname>ONVIF™</orgname>
      <uri>www.onvif.org</uri>
    </author>
    <pubdate> December, 2022</pubdate>
    <mediaobject>
      <imageobject>
        <imagedata fileref="media/logo.png" contentwidth="60mm"/>
      </imageobject>
    </mediaobject>
    <copyright>
      <year>2008-2022</year>
      <holder>ONVIF™ All rights reserved.</holder>
    </copyright>
    <legalnotice>
      <para>Recipients of this document may copy, distribute, publish, or display this document so
        long as this copyright notice, license and disclaimer are retained with all copies of the
        document. No license is granted to modify this document.</para>
      <para>THIS DOCUMENT IS PROVIDED "AS IS," AND THE CORPORATION AND ITS MEMBERS AND THEIR
        AFFILIATES, MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT
        LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
        NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THIS DOCUMENT ARE SUITABLE FOR ANY PURPOSE;
        OR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY PATENTS, COPYRIGHTS,
        TRADEMARKS OR OTHER RIGHTS.</para>
      <para>IN NO EVENT WILL THE CORPORATION OR ITS MEMBERS OR THEIR AFFILIATES BE LIABLE FOR ANY
        DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES, ARISING OUT OF OR
        RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT, WHETHER OR NOT (1) THE CORPORATION,
        MEMBERS OR THEIR AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, OR (2)
        SUCH DAMAGES WERE REASONABLY FORESEEABLE, AND ARISING OUT OF OR RELATING TO ANY USE OR
        DISTRIBUTION OF THIS DOCUMENT. THE FOREGOING DISCLAIMER AND LIMITATION ON LIABILITY DO NOT
        APPLY TO, INVALIDATE, OR LIMIT REPRESENTATIONS AND WARRANTIES MADE BY THE MEMBERS AND THEIR
        RESPECTIVE AFFILIATES TO THE CORPORATION AND OTHER MEMBERS IN CERTAIN WRITTEN POLICIES OF
        THE CORPORATION.</para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>22.12</revnumber>
        <date>Dec 2022</date>
        <author>
          <personname>Fredrik Svensson, Björn Völcker, Axel Keskikangas</personname>
        </author>
        <revremark>First release</revremark>
      </revision>
    </revhistory>
  </info>
  <chapter>
    <title>Scope</title>
    <para>This specification defines
      how media from ONVIF devices is signed to give a guarantee that the media
      has not been manipulated since it was transmitted from the device. </para>
  </chapter>
  <chapter>
    <title>Normative references</title>
    <para>ITU-T Recommendation, H.264: Advanced video coding for generic audiovisual services</para>
    <para role="reference">&lt;<link xlink:href="https://www.itu.int/rec/T-REC-H.264" xmlns:xlink="http://www.w3.org/1999/xlink"/>&gt;</para>
    <para>ITU-T Recommendation, H.265: High effiency video coding</para>
    <para role="reference">&lt;<link xlink:href="https://www.itu.int/rec/T-REC-H.265" xmlns:xlink="http://www.w3.org/1999/xlink"/>&gt;</para>
    <para>IETF RFC 6234 - US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)</para>
    <para role="reference">&lt;<link xlink:href="http://tools.ietf.org/html/rfc6234"
        xmlns:xlink="http://www.w3.org/1999/xlink"/>&gt;</para>
        <para>IETF RFC 3447 Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://tools.ietf.org/rfc/rfc3447.txt"></link>&gt;</para>
    <para>ITU-T Recommendation X.690 (2008) | ISO/IEC 8825-1:2008, Information technology – ASN.1 encoding rules: Specification of Basic Encoding Rules (BER),Canonical Encoding Rules (CER)and Distinguished Encoding Rules (DER)</para>
    <para role="reference">&lt;<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.itu.int/rec/T-REC-X.690-200811-S"></link>&gt;</para>
    
  </chapter>
  <chapter>
    <title>Terms and Definitions</title>
    <section>
      <title>Definitions</title>
      <informaltable>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="24*"/>
          <colspec colname="c2" colwidth="76*"/>
          <tbody valign="top">
            <row>
              <entry align="left"><para>Document</para></entry>
              <entry align="left"><para>A document in this spec refers to a codec specific document that
                includes hashes of all media frames since previous signing occasion together with
                other metadata. For H.264 and H.265 a document is encoded into a SEI frame.</para></entry>
            </row>
            <row>
              <entry align="left"><para>Certificate</para></entry>
              <entry align="left"><para>A certificate as used in this specification binds a public key
                to a subject entity. The certificate is digitally signed by the certificate issuer 
                to allow for verifying its authenticity.</para></entry>
            </row>
            <row>
              <entry align="left"><para>Signature</para></entry>
              <entry align="left"><para>A digital signature or digital signature scheme is a mathematical
                scheme for demonstrating the authenticity of a digital message or document.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Abbreviations</title>
      <informaltable>
        <tgroup cols="2">
          <colspec colname="c1" colwidth="24*"/>
          <colspec colname="c2" colwidth="76*"/>
          <tbody valign="top">
            <row>
              <entry valign="middle"><para>AU</para></entry>
              <entry valign="middle"><para>Access Unit</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>GOP</para></entry>
              <entry valign="middle"><para>Group Of Pictures</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>IDR</para></entry>
              <entry valign="middle"><para>Instantaneous Decoding Refresh</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>NAL</para></entry>
              <entry valign="middle"><para>Network Abstraction Layer</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>NALU</para></entry>
              <entry valign="middle"><para>NAL Unit</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>SEI</para></entry>
              <entry valign="middle"><para>Supplementary Enhancement Information</para></entry>
            </row>
            <row>
              <entry valign="middle"><para>TLV</para></entry>
              <entry valign="middle"><para>Type-Length-Value</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </chapter>
  <chapter>
    <title>Overview</title>
    <para><emphasis>Signed Media</emphasis> adds cryptographic signatures to captured media as part
      of the codec format. The media is, after adding these signatures, protected against
      manipulations, that is, the authenticity of the media can be validated if needed.</para>
    <para>The public key that is used to verify the signatures is also included in the media as well
      as the certificate to verify the public key.</para>
  </chapter>
  <chapter>
    <title>Signed Video</title>
    <para>A video consists of picture frames displayed at a certain frame rate. If these frames are
      transmitted or stored for later use and displayed by a third party one would like to be able
      to validate that they have not been manipulated since the time of signing.</para>
    <para>In brief, the principle of signing documents is used, that is, collect information and
      sign the information using a Private encryption key. Then, packetize the produced signature
      together with the signed information. For complete validation, the user first verifies the Public key
      with the certificate, then verifies the signature using the Public key. If successful so far the
      transmitted information can then be used to validate the video segment.</para>
    <para>On a high level, <emphasis>Signed Video</emphasis> hashes encoded video frames and on a
      regular basis creates a <code>document</code> representing these hashes together with some metadata
      and signs that <code>document</code>. This
      signature, together with the <code>document</code>, is added to the video using Supplementary Enhancement
      Information (SEI) frames.</para>
    <figure xml:id="signedvideofig">
      <title>Signed video overview</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="media/MediaSigning/signed_video.svg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <section>
      <title>Limitations</title>
      <para><emphasis role="bold">Codecs</emphasis>. <emphasis>Signed Video</emphasis> is defined
        for the H.264 and H.265 video codec formats. Therefore, most of the description uses the
        Network Abstraction Layer (NAL) concept. Note that raw video is not covered. There exists
        other codec standards where the same technique can be applied, e.g.,
        <?oxy_comment_start author="bjornv" timestamp="20220919T130539+0200" comment="Länk till AOM?"?>AV1<?oxy_comment_end?>.</para>
      <para><emphasis role="bold">Signing frequency</emphasis>. Signing is done upon transition
        between two Group of Pictures (GOP). For short GOP lengths the time between two GOP
        transitions may be shorter than the time it takes to perform the signing. Hence, there is a
        limit on how short GOPs a device can allow for to be able to sign a video in
        real-time.</para>
      <para><emphasis role="bold">Frame drops</emphasis>. Adding a list of hashes of each NALU combats
        the problem of lost frames, but cannot solve packet losses unless the affected NALU is
        completely removed from the stream. Further, the hash list is the most significant contribution
        to the increased bitrate.</para>
      <para><emphasis role="bold">Hashing algorithms</emphasis>. Hashing is used in two contexts.
        One is to get a short representation of each NALU to put in a list, and the other serves as
        a message digest to generate a signature. The same hashing algorithms have to be used both
        on the device and in the client. For simplicity the standard specifies which to use, which
        for example limits the ability to put extra security on some videos.</para>
      <para><emphasis role="bold">Signing algorithm</emphasis>. There is a fixed list of algorithms
        to choose from, which limits the scope somewhat since there may be variations within them.</para>
    </section>
    <section>
      <title>Detailed description on how the device generates SEI frames including signatures</title>
      <para>The H.264 and H.265 codec formats allow the user to add arbitrary data to a stream
        through SEI frames of type user data unregistered. <emphasis>Signed Video</emphasis> puts
        the produced signatures and additional metadata in such frames. These SEI frames are ignored
        by the decoder and will therefore not affect the video rendering. One obvious drawback is
        that it is easy to modify the signed video and make it unsigned by simply dropping those
        SEI frames. In some cases this can also be beneficial if, e.g., the user is no longer
        interested in its authenticity. It is out of scope to protect against lost SEI
        frames.</para>
      <para><?oxy_comment_start author="FredrikS" timestamp="20220920T123345+0200" comment="What about frames with multiple NALUs?"?>All
        operations are done on the encoded video stream. Each picture frame is split into NAL Units
        (NALU) and <emphasis role="italic">Signed Video</emphasis> operates on these
        NALUs.<?oxy_comment_end?> NALUs that are not part of a picture frame are ignored. These
        NALUs are:<itemizedlist>
          <listitem>
            <para>SPS/PPS/VPS</para>
            <para>These NALUs can be sent once in the beginning of a stream and stored at client
              side to add back when exporting to file. This is a correct process, but ruins the
              authenticity since Signed Video requires the order to be preserved. There is parts in
              these NALUs that can change the video behavior.</para>
          </listitem>
          <listitem>
            <para>AUD</para>
            <para>The Access Unit Delimiter is simply a NALU header used in access unit video
              streams, c.f., bytestream.</para>
          </listitem>
          <listitem>
            <para><?oxy_comment_start author="FredrikS" timestamp="20220920T123837+0200" comment="There could be information from the device that would be useful to guarantee authenticity for"?>SEIs
              other than Signed Video specific<?oxy_comment_end?></para>
            <para>SEI frames are in general information frames that usually has no visible impact on
              the video. Some of them can correctly be added to, or removed from, the stream at a
              later stage.</para>
          </listitem>
        </itemizedlist></para>
      <para>Note that these can still affect the visual aspect of a video, but are excluded for simplicity.</para>
    </section>
    <section>
      <title>Signing a GOP</title>
      <para><?oxy_comment_start author="bjornv" timestamp="20220919T130656+0200" comment="Vi kan inte i draften förklara att det främsta skälet är att kringå ett patent, men det kan vara värt att ta upp det på mötet  PATENT NUMBER??."?>Each NALU is hashed in linked manner.<?oxy_comment_end?> 
        Since every P-frame directly or indirectly refers to the I-frame starting the GOP they are linked
        together. If the I-frame is modified it indirectly modifies the P-frames. Therefore, each P-frame
        is hashed together with the dependent I-frame.</para>
      <para>All NALU data from the NALU header to the last byte (including the stop bit) should be hashed.
        The start code is excluded when hashing.</para>
      <para>Let <code>h(F)</code> denote the hash of a frame <code>F</code>, and <code>href =
          h(I)</code> is the hash of the first I-frame in a GOP and used as reference. Then each
        frame in a GOP is hashed according to <code>hash(F) = h(href, h(F))</code> where
          <code>href</code> and <code>h(F)</code> have been aligned in memory. All hashes are
        collected in a list and together with some metadata form a <code>document</code>, which
        later will be signed.</para>
      <para>To preserve the order of GOPs the I-frame of the
        <?oxy_comment_start author="FredrikS" timestamp="20220920T124438+0200" comment="Should be previous???"?>next<?oxy_comment_end?>
        GOP is also included in the list of hashes, that is, <code>hash(Inext) = h(href,
          h(Inext))</code> is added as well.</para>
      <para>This <code>document</code> is then signed (hashed and encrypted) to produce a signature
        as <code>signature = encrypt(h(document))</code>
        and together with the <code>document</code> itself is added to the stream in a SEI, that
        is, SEI = <code>document + signature</code>. The next GOP is initiated with a new <code>href</code>
        using the very same I-frame that closed the previous GOP.</para>
    </section>
    <section>
       <title>Bootstrapping the Videostream</title>
        <para>
          In order to provide an expedient video stream startup experience, one may send an empty HashList TLV
          in order to indicate to the client which hashing algorithm is used for hashing of the NALUs.
          Furthermore the device may also pre-compute all the "Send Once" TLVs, including signing in order to
          be able to supply the "Send Once" TLVs together with the other "Send Once" information such as 
          PPS/SPS/VPS.
        </para>
    </section>
    <section>
      <title>SEI format</title>
      <para>SEIs of type <emphasis role="italic">user data unregistered</emphasis> are used. These
        are organized as:</para>
      <para>
        <table frame="all">
          <title>User data unregistered SEI</title>
          <tgroup cols="5">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <colspec colname="c3" colnum="3" colwidth="1*"/>
            <colspec colname="c4" colnum="4" colwidth="1*"/>
            <colspec colname="c5" colnum="5" colwidth="1*"/>
            <tbody>
              <row>
                <entry align="center"><para>NALU header</para></entry>
                <entry align="center"><para>payload size</para></entry>
                <entry align="center"><para>UUID</para></entry>
                <entry align="center"><para>payload</para></entry>
                <entry align="center"><para>stop bit</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>The UUID is used to put a <emphasis role="italic">Signed Video</emphasis> identity to
        the SEI.
        UUID for Signed Video is <code>59, 89, d8, 92, 07, 2f, 49, ef, 94, 95, 40, 6d, bb, a9, ca, 35
        </code> in hexadecimal notation. The payload includes the metadata
        and the signature, and is serialized in a TLV structure. The order of the added TLV tags is
        arbitrary except the signature tag which by definition has to come last. By definition the
        <code>document</code> includes everything from the NALU header (inclusive) to the signature
        tag (exclusive), hence the entire frame is secured.</para>
      <para>
        <table frame="all">
          <title>Signed video SEI</title>
          <tgroup cols="7" align="center">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <colspec colname="c3" colnum="3" colwidth="1*"/>
            <colspec colname="c4" colnum="4" colwidth="1*"/>
            <colspec colname="c5" colnum="5" colwidth="1*"/>
            <colspec colname="c6" colnum="6" colwidth="1*"/>
            <colspec colname="c7" colnum="7" colwidth="1*"/>
            <thead>
              <row>
                <entry align="center" namest="c1" nameend="c5">
                  <para>document</para>
                </entry>
                <entry align="center"/>
                <entry align="center">
                  <para> </para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry align="center"><para>NALU header</para></entry>
                <entry align="center"><para>payload size</para></entry>
                <entry align="center"><para>UUID</para></entry>
                <entry align="center"><para>metadata</para></entry>
                <entry align="center"><para>list of hashes</para></entry>
                <entry align="center"><para>signature</para></entry>
                <entry align="center"><para>stop bit</para></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <section>
        <title>Information sent only once</title>
        <para>Large data blobs like certificates are preferably sent only once. This "only need once"
          information should be put in a separate SEI with a different UUID and signed. This separates
          the SEI from the video stream and can be copied and added to any exported material.
          
          Vi borde trycka tillbaka på UUID/version byte här för att indikera att det är en frame som
          är godkänt att flytta på? Jag tycker det vore bra.
        </para>
      </section>
      <section>
        <title>TLV tags</title>
        <para>Following is a list of possible TLV tags that can be part of a SEI payload. The length
          field of some of these tags can be represented with only one byte, but for ease of use all
          tags use 2 bytes for representing the length.</para>
        <para>
          <table frame="all">
            <title>TLV tags</title>
            <tgroup cols="4" align="left">
              <colspec colname="c1" colnum="1" colwidth="1.64*"/>
              <colspec colname="c2" colnum="2" colwidth="1*"/>
              <colspec colname="newCol3" colnum="3" colwidth="1*"/>
              <colspec colname="c3" colnum="4" colwidth="4.47*"/>
              <thead>
                <row>
                  <entry><para>Tag</para></entry>
                  <entry><para>#</para></entry>
                  <entry><para>Freq</para></entry>
                  <entry><para>Description</para></entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><para>General GOP info</para></entry>
                  <entry><para>1</para></entry>
                  <entry><para>Every document</para></entry>
                  <entry><para>General info like GOP number</para></entry>
                </row>
                <row>
                  <entry><para><?oxy_comment_start author="bjornv" timestamp="20220920T095030+0200" comment="Om vi alltid ska skicka med en hash-lista så kan vi väl kombinera ihop denna tag med &quot;General GOP info&quot;?"?>Hash
                      list<?oxy_comment_end?></para></entry>
                  <entry><para>2</para></entry>
                  <entry><para>Every document</para></entry>
                  <entry><para>List of frame hashes</para></entry>
                </row>
                <row>
                  <entry><para>Signature</para></entry>
                  <entry><para>3</para></entry>
                  <entry><para>Every document</para></entry>
                  <entry><para>The signature of the document and signing algorithm</para></entry>
                </row>
                <row>
                  <entry><para>Public key</para></entry>
                  <entry><para>4</para></entry>
                  <entry><para>Every n:th document (or once?)</para></entry>
                  <entry><para>The public signing key</para></entry>
                </row>
                <row>
                  <entry><para>ONVIF vendor info</para></entry>
                  <entry><para>5</para></entry>
                  <entry><para>Every n:th document (or once?)</para></entry>
                  <entry><para>Information about the device and vendor</para></entry>
                </row>
                <row>
                  <entry><para>Certificate</para></entry>
                  <entry><para>6</para></entry>
                  <entry><para>Once</para></entry>
                  <entry><para>The device video signing key certificate & the intermediate
                    CA signing certificate.</para></entry>
                </row>
                <row>
                  <entry><para>Arbitrary data</para></entry>
                  <entry>
                    <para>7</para>
                  </entry>
                  <entry><para>Optional</para></entry>
                  <entry><para>You put your weed in there</para></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </para>
      </section>
      <section>
        <title>General GOP info</title>
        <para>Includes GOP specific information like a GOP counter and a timestamp of the first frame.</para>
        <itemizedlist>
          <listitem>
            <para>Tag version (1 byte)</para>
          </listitem>
          <listitem>
            <para>GOP counter (4 bytes)</para>
          </listitem>
          <listitem>
            <para>ONVIF Signed Media version (X bytes)</para>
            <para>This will prevent version mismatch between device and client.</para>
          </listitem>
          <listitem>
            <para>Unix epoch timestamp in UTC (8 bytes)</para>
          </listitem>
          <listitem>
            <para>Flags (Y bytes)</para>
            <para>Examples: emulation prevention bytes used</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Public key</title>
        <para>This mandatory field contains the Public key used to sign the video.</para>
        <itemizedlist>
          <listitem>
            <para>Tag version (1 byte)</para>
          </listitem>
          <listitem>
            <para>Signing
              algorithm OID(8 bytes)</para>
            <para>Signing algorithm OID [REF: Recommendation ITU-T X.660 | ISO/IEC 9834-1]</para>
          </listitem>
          <listitem>
            <para>Public key in PEM format (variable bytes)</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>ONVIF vendor info</title>
        <para>Includes information that identifies the product and vendor. The
          following fields are supported. These fields are only for easy parsing by a player.
          The true device information is present in the certificate.</para>
        <itemizedlist>
          <listitem>
            <para><?oxy_comment_start author="FredrikS" timestamp="20220920T130019+0200" comment="Is this useful? If fw is compromised you can change this information too to write a different fw version"?>Firmware
              version<?oxy_comment_end?></para>
          </listitem>
          <listitem>
            <para>Serial Number or similar</para>
          </listitem>
          <listitem>
            <para>Manufacturer (who is the signer)</para>
          </listitem>
          <listitem>
            <para><?oxy_comment_start author="FredrikS" timestamp="20220920T125533+0200" comment="Not needed, since it&apos;s part of the cert. Maybe add product model also. "?>Address
              (Contact information of signer, e.g., URL, email, mail)<?oxy_comment_end?></para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Hash list</title>
        <para>This mandatory field contains the hash list, for a complete GOP I through
          <?oxy_comment_start author="FredrikS" timestamp="20220920T130135+0200" comment="Include B-frames as well"?>P-frames<?oxy_comment_end?>
          and the linked I-frame of the succeeding GOP.</para>
        <itemizedlist>
          <listitem>
            <para>Tag version (1 byte)</para>
          </listitem>
          <listitem>
            <para>All hashes in one big chunk (variable bytes)</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Signature</title>
        <para>This mandatory field contains the Signature of the document.</para>
        <itemizedlist>
          <listitem>
            <para>Tag version (1 byte)</para>
          </listitem>
          <listitem>
            <para>Message digest hash selected from a list of supported hashing algorithms (1 byte)</para>
          </listitem>
          <listitem>
            <para><?oxy_comment_start author="FredrikS" timestamp="20220920T130305+0200" comment="Add reason why this is needed"?>Actual
              size of signature<?oxy_comment_end?> (2 bytes)</para>
            <para>Not all signing algorithms generate a fixed size.</para>
          </listitem>
          <listitem>
            <para>The signature (max signature size bytes)</para>
            <para>A fixed size is reserved to be able to determine the payload size of the SEI.
              This is necessary to be able to hash the SEI and generate the message digest.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Arbitrary data</title>
        <para>This optional field contains Abritrary data that the device manifacturer might want included.
        There is no guarantee that the Arbitrary data is reasonable or readable by anyone not priviously
        knowledgable in the area.</para>
      </section>
      <section>
        <title>Certificate</title>
        <para>This optional field contains the ceritficate corresponding to the public key. This field is optional
        in order to not put undue bitrate burden on the videostream as x509 certificates can be quite large, especially if 
        intermediate certificates also are included.</para>
      </section>
    </section>
    <section>
      <title><?oxy_comment_start author="FredrikS" timestamp="20220920T130703+0200" comment="Write pseudo code for the generation.
Add separate section about export? To include the cert. Add in Export File Format."?>How to
        generate the SEI<?oxy_comment_end?></title>
        <itemizedlist>
          <listitem>
            <para>Write SEI NALU header</para>
          </listitem>
          <listitem>
            <para>Determine the total payload size, excluding emulation prevention bytes. The total payload includes
              the UUID (16 bytes) and all TLV data and the stop bit byte.</para>
          </listitem>
          <listitem>
            <para>Write the payload size according to the codec standard.</para>
          </listitem>
          <listitem>
            <para>Write the UUID</para>
          </listitem>
          <listitem>
            <para>Write all TLVs except the signature since it by definition cannot be written yet. Write the TLV data
              using emulation prevention bytes if it is turned on.</para>
          </listitem>
          <listitem>
            <para>Hash the written data from NALU header to the last written TLV data. Denote this "document hash"</para>
          </listitem>
          <listitem>
            <para>Sign/Encrypt the document hash in a secure environment.</para>
          </listitem>
          <listitem>
            <para>Write the signature data to the Signature tag when signing has been completed.</para>
          </listitem>
          <listitem>
            <para>Write a stop bit byte.</para>
          </listitem>
        </itemizedlist>
    </section>
    <section>
      <title>How to add a generated SEI to a video stream in a device</title>
      <para>Without loss of generality, consider three consecutive GOPs each starting with an IDR
        (I-frame) followed by 4 non-IDRs (P- or B-frames). In text format it would look like
          <code>IPPPPIPPPPIPPPP</code>. The signing information is collected in a SEI frame
          (<code>S</code>).
        <?oxy_comment_start author="bjornv" timestamp="20220919T115655+0200" comment="Behöver vi säga att H.265 faktiskt tillåter att SEIs läggs efter picture NALUs, men att det blir smidigare att göra samma för båda codec-formaten?"?>The
        SEI should be added to the video stream such that it follows the Access Unit (AU) format,
        i.e., it has to prepend all picture NALUs in a AU.<?oxy_comment_end?> Each I-frame will
        trigger a signing procedure and ideally the SEI is generated and available instantaneously
        and can be attached to the stream as <code>SIPPPPSIPPPPSIPPPP</code>.</para>
      <para>In practice signing in secure hardware takes time and blocking the video stream while waiting
        adds jitter to the video stream. The device therefore has the option to add it to the video stream later,
        when signing has been completed. In such a case the text-ified stream can look like
          <code>IPSPPPISPPPPIPPSPP</code>.</para>
    </section>
    <section>
      <title>Client handling of a signed video stream</title>
      <para><?oxy_comment_start author="bjornv" timestamp="20220919T115556+0200" comment="Ska vi nämna att en klient kan hjälpa en framtida validering genom att flytta SEIs till rätt GOP?"?>Attached to the first AU of a signed video stream is the SEI including all information that is only
        sent once. This SEI should be stored for later validation. Further, when exporting a video segment to file,
        this SEI should be added to the first AU of that recording.<?oxy_comment_end?></para>
    </section>
    <section>
      <title><?oxy_comment_start author="FredrikS" timestamp="20220920T130635+0200" comment="Make this section informative? Since it&apos;s difficult to test clients"?>Client
        side validation<?oxy_comment_end?></title>
      <para>Validation is done GOP by GOP, just like the signing side signs GOP by GOP. The
        validation has to be aborted upon any failing step below. <itemizedlist>
          <listitem>
            <para>Verify the signature of the "only sent once" SEI.</para>
          </listitem>
          <listitem>
            <para>Verify the sent certificate.</para>
          </listitem>
          <listitem>
            <para>Verify the Public key.</para>
          </listitem>
          <listitem>
            <para><?oxy_comment_start author="bjornv" timestamp="20220919T130247+0200" comment="Ska vi beskriva hur man kan hitta rätt SEI? Och hur man ska hantera/detektera bortplockade GOP:ar? AUTHENTIC WITH MISSING GOP?"?>Find
              the SEI associated with the GOP that is to be validated.<?oxy_comment_end?></para>
          </listitem>
          <listitem>
            <para>Verify the signature of the SEI.</para>
          </listitem>
          <listitem>
            <para>Hash all NALUs of the GOP in the same way as is described for the device part
              above.</para>
          </listitem>
          <listitem>
            <para>Verify each computed hash against corresponding hash in the hash list present in
              the SEI.</para>
          </listitem>
          <listitem>
            <para>The client should signal AUTHENTIC if all computed hashes are verified
              successfully against the hashes in the SEI, and the order is preserved and no NALUs
              are missing.</para>
            <para>If any missing NALU is detected the client should signal AUTHENTIC WITH MISSING
              NALUS.</para>
            <para>If no SEIs are present the client should signal NOT SIGNED.</para>
            <para>If none of the above applies the video is not authentic and the client should
              signal NOT AUTHENTIC.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <section>
      <title> Certificate validation </title>
      <para>
        In order to validate the certificate, one follows the certificate chain from the leaf 
        certificate to the root certificate according to the x.509 standard. Since Onvif does not
        provide a trusted certificate store the client implementor and/or the end user must install
        trusted root CA certificates in the client. Typically one also need the intermediate CA 
        certificate which is also provided by the device. 
        When verifying old video, it may happen that the certificates have expired as compared to
        the current date. However, the verification concerns the date that the video was created
        as such the date should be validated against the claimed recording date rather than the
        current date.
      </para>
    </section>
    <section>
      <title> Exporting a Signed Media  </title>
      <para>
        In order to be able to verify an exported segment of Signed Media, the client must include
        the "Send Once" TLVs that are included in the beginning of the mediastream. This can be
        combined with the Onvif Export File Format in order to provide layered video authentication,
        the media signing covers authenticity in the media layer where as the Export File 
        Format provides validity on the container level. Even if this Signed Media specification is
        used, the Onvif Export File Format is still valuable as it provides more information of the
        provenance of the video as it allows the user to tell the story of the path of the video.
      </para>
    </section>
    <section>
      <title>Dangling End </title>
      <para>
        One special consideration is the possbility of dangling ends, i.e. that the SEI frame containing
        the verification information for a GOP may be very delayed. This can be due to a number of reasons
        such as delay in signature generation process, very long GOP lengths when using dynamic GOP & 
        other implementation specific issues.
        When exporting recording, or trying to verify a dropped videostream, this means that the end of the
        video may not be covered by the verificaiton information in the current segment.
      </para>
    </section>
  </chapter>
  <chapter>
    <title>Audio Signing</title>
    <para>
      <?oxy_comment_start author="bjornv" timestamp="20220919T130146+0200" comment="AAC har precis som H.26x ett definierat block för godtycklig data precis som vi har SEI, men storleken är begränsad. Dock kan man lägga till multipla sådana block. Hur som helst så blir det orimligt dyrt att signera audio oberoende av video. Man vill också koppla ihop audio med video så att man inte kan validera ljud inklippt från en annan tidpunkt. Hur vi kombinerar audio och video har Axis inte specificerat än."?>TODO<?oxy_comment_end?></para>
  </chapter>
  <appendix role="revhistory">
    <title>Revision History</title>
    <para/>
  </appendix>
</book>
